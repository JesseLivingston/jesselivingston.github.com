<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小重山]]></title>
  <link href="http://jesselivingston.github.io/atom.xml" rel="self"/>
  <link href="http://jesselivingston.github.io/"/>
  <updated>2016-03-05T00:06:09+08:00</updated>
  <id>http://jesselivingston.github.io/</id>
  <author>
    <name><![CDATA[Livingston Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Run Envjs-site on Local]]></title>
    <link href="http://jesselivingston.github.io/blog/2016/03/04/run-envjs-site-on-local/"/>
    <updated>2016-03-04T23:51:02+08:00</updated>
    <id>http://jesselivingston.github.io/blog/2016/03/04/run-envjs-site-on-local</id>
    <content type="html"><![CDATA[<p>As the envjs site <a href="http://www.envjs.com/">http://www.envjs.com/</a> expired, and I want to access the doc and guides of envjs, I will setup a local envjs-site server.</p>

<p>First I need to download appengine java sdk with version 1.2.1, from maven repository <a href="http://mvnrepository.com/artifact/com.google.appengine/appengine-java-sdk/1.2.1,">http://mvnrepository.com/artifact/com.google.appengine/appengine-java-sdk/1.2.1,</a> as it does not exist on google appengine official site.</p>

<p>Then I need to clone or download envjs-site project, and put it under /opt/webapps/</p>

<p>Then I need to modify the dev_appserver.sh, add</p>

<p><code>--jvm_flag=-Dappengine.user.timezone=UTC
</code></p>

<p>to the java command at last line.</p>

<p>Run it on local:</p>

<p><code>sudo dev_appserver.sh --address=0.0.0.0 path-to-envjs-site
</code>
Done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Sdkman]]></title>
    <link href="http://jesselivingston.github.io/blog/2015/11/04/the-sdkman/"/>
    <updated>2015-11-04T23:43:23+08:00</updated>
    <id>http://jesselivingston.github.io/blog/2015/11/04/the-sdkman</id>
    <content type="html"><![CDATA[<p><a href="http://sdkman.io/install.html">http://sdkman.io/install.html</a>
节省大量时间去管理开发环境</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resolve a Xcode/iOS License Problem]]></title>
    <link href="http://jesselivingston.github.io/blog/2015/09/23/resolve-a-xcode-slash-ios-license-problem/"/>
    <updated>2015-09-23T23:30:55+08:00</updated>
    <id>http://jesselivingston.github.io/blog/2015/09/23/resolve-a-xcode-slash-ios-license-problem</id>
    <content type="html"><![CDATA[<p>Throw a exception which message is</p>

<p><strong>Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.</strong></p>

<p>when use git or other commands, type</p>

<pre><code>sudo xcodebuild -license
</code></pre>

<p>in terminal, and then agree the license.</p>

<p>Done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Jenkins on Jetty]]></title>
    <link href="http://jesselivingston.github.io/blog/2015/09/05/run-jenkins-on-jetty/"/>
    <updated>2015-09-05T17:06:59+08:00</updated>
    <id>http://jesselivingston.github.io/blog/2015/09/05/run-jenkins-on-jetty</id>
    <content type="html"><![CDATA[<p>Download jetty
Download jenkins.war</p>

<p>copy the jenkins.war into jetty&rsquo;s webapps</p>

<p><strong>Create</strong> jenkins.xml <strong>in webapps, content:</strong></p>

<pre><code>&lt;Configure class="org.eclipse.jetty.webapp.WebAppContext"&gt;
    &lt;Set name="contextPath"&gt;/jenkins&lt;/Set&gt;
    &lt;Set name="war"&gt;&lt;SystemProperty name="jetty.home" default="."/&gt;/webapps/jenkins.war&lt;/Set&gt;
    &lt;Get name="securityHandler"&gt;
        &lt;Set name="loginService"&gt;
            &lt;New class="org.eclipse.jetty.security.HashLoginService"&gt;
                &lt;Set name="name"&gt;Jenkins Realm&lt;/Set&gt;
                &lt;Set name="config"&gt;&lt;SystemProperty name="jetty.home" default="."/&gt;/etc/realm.properties&lt;/Set&gt;
            &lt;/New&gt;
        &lt;/Set&gt;
    &lt;/Get&gt;
&lt;/Configure&gt;`
</code></pre>

<p><strong>*Otherwise you&rsquo;ll encounter the no LoginService error.</strong></p>

<p>Startup the jetty is very simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Usergrid Usage Notes]]></title>
    <link href="http://jesselivingston.github.io/blog/2015/08/20/usergrid-usage-notes/"/>
    <updated>2015-08-20T21:22:44+08:00</updated>
    <id>http://jesselivingston.github.io/blog/2015/08/20/usergrid-usage-notes</id>
    <content type="html"><![CDATA[<p>首先是 clone master 代码</p>

<p><code>
git clone https://github.com/apache/incubator-usergrid.git
</code>
build</p>

<p><code>
mvn clean install -DskipTests=true
</code></p>

<p>之后就可以到 stack 目录下去启动了</p>

<p><code>
cd launcher; java -jar target/usergrid-launcher-*.jar
</code></p>

<p>后台管理界面， 到 portal 中去</p>

<p><code>./build.sh dev
</code></p>

<p>即可</p>

<p>但 usergrid-launcher 报 cassandra jamm 相关的错误， 一种方式是可以在上面的启动命令中加参数</p>

<p><code>
java -javaagent:../rest/target/ROOT/WEB-INF/lib/jamm-0.2.5.jar -jar target/usergrid-launcher-*.jar
</code></p>

<p>目前是发现在 rest 中的 WEB-INF 下有 jamm 的 jar</p>

<p>另一种就是改 launcher 目录下的 launch 脚本， 向 JVM_OPTS 中加上面的参数， 再使用 launch 脚本来启动应用</p>

<p>启动时， 除了第一次勾选 Initialize Database on Start， 以后启动时都不要勾， 不然前面创建的数据就全没了</p>

<p>另外， 启动时也可以加 -db, -init option 来指定是 Start Database 还是 Initialize Database， 这个详细情况只能看源代码了， 查看 launch 的 pom.xml 找到 main class 跟进去看就可以， 我就懒得把类名写在这儿了， 都还是比较简单的</p>

<p>客户端在使用时， (以 iOS 为例) 初始化时把自己的 stack launcher 的地址作为 initWithOrganizationId:withApplicationID:baseURL 作为第三个参数传递过去， 客户端的文档比较差。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Idea/Intellij to Develop Scala/Spark Project]]></title>
    <link href="http://jesselivingston.github.io/blog/2015/08/10/use-idea-slash-intellij-to-develop-scala-slash-spark-project/"/>
    <updated>2015-08-10T00:20:06+08:00</updated>
    <id>http://jesselivingston.github.io/blog/2015/08/10/use-idea-slash-intellij-to-develop-scala-slash-spark-project</id>
    <content type="html"><![CDATA[<ol>
<li>没法忍了，电信这个臭不要脸的东西，Idea 里下载 scala, sbt 的插件实在是没法成功，一个方法那就是把两个插件的下载链接放到百度云盘里去做离线下载，再从云盘下到本地，然后从磁盘安装插件就可以了</li>
<li>对于外部创建的 sbt 项目，倒没必要去装个什么 idea 的 sbt plugin， 装了上面的 Idea 的 sbt 插件就够了， 打开相应项目的 .sbt 文件，会提示你导入的，之后就可以看到相应的引入的依赖了</li>
<li>基本上一个基本的开发环境就建起来了</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming-language]]></title>
    <link href="http://jesselivingston.github.io/blog/2015/07/26/programming-language/"/>
    <updated>2015-07-26T15:33:39+08:00</updated>
    <id>http://jesselivingston.github.io/blog/2015/07/26/programming-language</id>
    <content type="html"><![CDATA[<p>咱家实在是记忆力差，几个快捷键先暂且记录下来：</p>

<p><code>Ctrl + x + c</code>
退出 Emacs</p>

<p><code>Ctrl + x + f</code>
打开文件</p>

<p><code>Ctrl + x + s</code>
保存文件</p>

<p><code>Ctrl + c + s</code>
打开 sml repl
如果打开 sml repl 的时候报找不到 sml， 修改 ~/.emacs 在顶上添加两行</p>

<p><code>(setenv "PATH" (concat "/usr/local/smlnj-110.75/bin:" (getenv "PATH")))</code></p>

<p><code>(setq exec-path (cons "/usr/local/smlnj-110.75/bin" exec-path))</code></p>

<p>虽然我对 emacs 配置的这一个个 function 不熟， 但咱也多少看得懂一点 lisp 语法， 这不就是把 PATH 环境变量 append 一个 smlnj 的 bin 路径， 再把 exec-path append 一个 smlnj 的 bin 路径嘛</p>

<p>进入 sml repl 后， 引入一个文件用 <code>use</code>， 别忘了以分号结尾</p>

<p><code>use "first.sml";</code></p>

<hr />

<p>关于表达式（expression），有三个重要的问题：</p>

<ol>
<li>语法（Syntax）</li>
<li>类型检查规则（Type-checking rules）</li>
<li>计算表达式的值的规则（Evaluation rules）</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create First Form Patch]]></title>
    <link href="http://jesselivingston.github.io/blog/2015/07/25/create-first-form-patch/"/>
    <updated>2015-07-25T16:52:58+08:00</updated>
    <id>http://jesselivingston.github.io/blog/2015/07/25/create-first-form-patch</id>
    <content type="html"><![CDATA[<p>用 Form 试了一下， 使用起来还不难， 后面可以再慢慢玩。
<a href="http://jesselivingston.github.io/downloads/first_form_patch/first.form">first.form</a>
根据<a href="http://www.jianshu.com/p/cce67182403b">这上面</a>来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop 教程1]]></title>
    <link href="http://jesselivingston.github.io/blog/2015/07/17/hadoop-tutorial-1/"/>
    <updated>2015-07-17T01:30:36+08:00</updated>
    <id>http://jesselivingston.github.io/blog/2015/07/17/hadoop-tutorial-1</id>
    <content type="html"><![CDATA[<p>环境： Mac, JDK8, Maven3</p>

<ol>
<li>下载二进制版，这种 java 代码的玩意儿就同必要从源码去编译了吧，怎么方便怎么来</li>
<li>先在单机上跑一下试试</li>
<li><p>在下载下来的 hadoop 目录里，创建个 input 目录</p>

<p> <code>$mkdir input
</code></p></li>
<li><p>把 etc/hadoop 目录下的 xml 文件复制进去，后面使用</p>

<p> <code>$cp etc/hadoop/*.xml input
</code></p></li>
<li><p>统计一下 input 目录里的文件内容匹配 &lsquo;dfs[a-z.]+&rsquo; 的地方，结果放到 output 目录里</p>

<p> <code>$bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar grep input output 'dfs[a-z.]+'
</code></p></li>
<li><p>查看一下 output 的内容</p>

<p> <code>$cat output/*
</code></p></li>
<li><p>以伪分布式的方式玩玩，首先修改 etc/hadoop/core-site.xml:</p>

<p> <code>&lt;configuration&gt;
     &lt;property&gt;
         &lt;name&gt;fs.defaultFS&lt;/name&gt;
         &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;
     &lt;/property&gt;
 &lt;/configuration&gt;
</code></p></li>
<li><p>修改 etc/hadoop/hdfs-site.xml:</p>

<p> <code>&lt;configuration&gt;
     &lt;property&gt;
         &lt;name&gt;dfs.replication&lt;/name&gt;
         &lt;value&gt;1&lt;/value&gt;
     &lt;/property&gt;
 &lt;/configuration&gt;
</code></p></li>
<li><p>为了能够无密钥 ssh 登录 localhost，需要生成一对 dsa 算法的加密密钥，并把公钥放到 authorized_keys 里去</p>

<p> <code>$ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa</code></p>

<p> <code>$cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></p>

<p> <code>$export HADOOP_PREFIX=/usr/local/hadoop</code></p>

<p> 不要按官网上教程抄，HADOOP_PREFIX 中的下划线不需要转义</p></li>
<li><p>格式化文件系统，虽然我目前也不是太了解 HDFS</p>

<p><code>$bin/hdfs namenode -format</code></p></li>
<li><p>以后台进程的形式启动 NameNode, DataNode:</p>

<p><code>$sbin/start-dfs.sh</code>
然后就可以打开 <a href="http://localhost:50070/">localhost:50070</a> 查看 NameNode 了</p></li>
<li><p>建立 MapReduce jobs 执行必需的目录，我的用户名就是 admin:</p>

<p><code>$bin/hdfs dfs -mkdir /user</code></p>

<p><code>$bin/hdfs dfs -mkdir /user/admin</code></p></li>
<li><p>把etc/hadoop 里的文件复制到分布式文件系统中</p>

<p><code>$bin/hdfs dfs -put etc/hadoop input</code></p></li>
<li><p>执行 example:</p>

<p><code>$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar grep input output 'dfs[a-z.]+'</code></p></li>
<li><p>有两种方式查看上面的结果， 一种是先把分布式文件系统中的文件复制到本地文件系统中来再查看:</p>

<p><code>$ bin/hdfs dfs -get output output</code></p>

<p><code>$ cat output/*</code></p>

<p>一种是直接查看分布式文件系统上的内容:</p>

<p><code>$ bin/hdfs dfs -cat output/*</code></p></li>
<li><p>与 11 配套的， 关闭后台的 NameNode, DataNode:</p>

<p><code>$ sbin/stop-dfs.sh</code></p></li>
</ol>


<p>好在以前接触过 solr，这种分布式的东西了解一点，后面再慢慢把这里面每一行都确切地搞清楚做了什么事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminologies]]></title>
    <link href="http://jesselivingston.github.io/blog/2015/05/28/terminologies/"/>
    <updated>2015-05-28T22:59:38+08:00</updated>
    <id>http://jesselivingston.github.io/blog/2015/05/28/terminologies</id>
    <content type="html"><![CDATA[<ol>
<li>不同的报单形式及对应中文</li>
</ol>


<table>
<thead>
<tr>
<th style="text-align:center;">English            </th>
<th style="text-align:center;">   中文           </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"><em>limit order</em>      </td>
<td style="text-align:center;">  <strong>限价单</strong>      </td>
</tr>
<tr>
<td style="text-align:center;"><em>stop order</em>       </td>
<td style="text-align:center;">  <strong>止损单</strong>      </td>
</tr>
<tr>
<td style="text-align:center;"><em>market order</em>     </td>
<td style="text-align:center;">  <strong>市价单</strong>      </td>
</tr>
<tr>
<td style="text-align:center;"><em>stop limit order</em> </td>
<td style="text-align:center;">  <strong>限价止损单</strong>   </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
</feed>
